# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import math
def generate_triangle_number(bound):
    results = []
    sum = 0
    for i in range(1,bound):
        sum += i
        results.append(sum)
    print(results)
    return results

# ## 太慢 too slow
# def find_factor(n):
#     factors = []
#     for i in range(1, n+1 ):
#         # print("i=",i)
#         if n % i == 0:
#             factors.append(i)
#     print(n,"len=",len(factors))
#     return factors

def find_factor_v1(n):
    # print("the:",n)
    factors = []
    for i in range(1, int(math.sqrt(n))+1 ):
        # print("i=",i)
        if n % i == 0:
            factors.append(i)
            if i != n//i:
                factors.append(n//i)
            
    print("len=",len(factors))
    return factors

if __name__ == "__main__":
    triangels = generate_triangle_number(int(1e5))
    for i in triangels:
        factors = find_factor_v1(i)
        # print(factors)
        if len(factors) > 500:
            print("#",i,factors)
            break