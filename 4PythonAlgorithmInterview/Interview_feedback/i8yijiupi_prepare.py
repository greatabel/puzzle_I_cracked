'''


#----------------------------#



'''

import time
from termcolor import colored



def main_process():
    t = '''
@ 精通机器学习理论与方法，特征工程；在自然语言处理，图像识别，推荐系统，搜索系统方向有实际项目经验者优先

特征工程：https://zhuanlan.zhihu.com/p/63798498 
    数据和特征决定了机器学习的上限，模型和算法只是逼近这个上限。
    特征，即原始数据某个方面的数值表示。或者说，特征是模型输入中的X。
    特征工程就是从原始数据中提取有用因子，并转换为适合机器学习模型的特征的过程
    首先对数据进行观察，看量级、正负、最大最小值，根据观察进行处理：
    2值化，区间量化、对数变换、指数变换、归一化、交互特征

自然语言处理：
    LSTM Long Short-Term Memory 长短期记忆
    中文NLP vs 英文NLP
        从实用文本分析技术而言：如果只做主题聚类、文本分类等任务的话，
        中英文最大差别就在于，中文需要做自动分词，相关工具包已经很多了，包括提到的Jieba。
        进入到深度学习时代，就直接可以用基于字的神经网络模型了。

    聊天机器人：基于检索的模型相对简单。它是利用预定义响应的数据库和启发式方法根据输入的内容进行回复。
    启发式可以像基于规则一样简单，或者是机器学习匹配的分类一样复杂。这些系统并不会生成新的内容
    仅仅是从固定的文本中选择一个回答。

    生成模型相对较难，他不依赖于预定义响应，而是在生成新的回复。生成模型是依赖于机器翻译技术，
    并不是从一种语言转为另一种，而是将输入语“转”为输出响应

推荐系统：
    根据其是不是为不同的用户推荐不同的数据，
    分为基于大众行为（网站管理员自行推荐，或者基于系统所有用户的反馈统计计算出的当下比较流行的物品）、
    及个性化推荐引擎（帮你找志同道合，趣味相投的朋友，然后在此基础上实行推荐）； 

    根据其数据源，分为基于人口统计学的（用户年龄或性别相同判定为相似用户）、
    基于内容的（物品具有相同关键词和Tag，没有考虑人为因素），
    以及基于协同过滤的推荐（发现物品，内容或用户的相关性推荐，分为三个子类，下文阐述）；

    而基于协同过滤的推荐，又分三个子类： 
    基于用户的推荐(通过共同口味与偏好找相似邻居用户，K-邻居算法，你朋友喜欢，你也可能喜欢)， 
    基于项目的推荐(发现物品之间的相似度，推荐类似的物品，你喜欢物品A，C与A相似，可能也喜欢C)， 
    基于模型的推荐(基于样本的用户喜好信息构造一个推荐模型，然后根据实时的用户喜好信息预测推荐)。  

    我们看到，此协同过滤算法最大限度的利用用户之间，或物品之间的相似相关性，
    而后基于这些信息的基础上实行推荐。下文还会具体介绍此协同过滤。 


    不过一般实践中，我们通常还是把推荐引擎分两类： 

    第一类称为协同过滤，即基于相似用户的协同过滤推荐（用户与系统或互联网交互留下的一切信息、
    蛛丝马迹，或用户与用户之间千丝万缕的联系），
    以及基于相似项目的协同过滤推荐（尽最大可能发现物品间的相似度）；
    第二类便是基于内容分析的推荐（调查问卷，电子邮件，或者推荐引擎对本blog内容的分析）。 

知识图谱：
    是基于图的数据结构，通常用图数据库进行存储，我们先来看一下图数据库排行
    实际上neo4j 已经是当前业界分析知识图谱的主流数据库

    '''
    print(t)

if __name__ == "__main__":
    tic = time.process_time()
    
    main_process()

    toc = time.process_time()
    print("time=",toc - tic)





